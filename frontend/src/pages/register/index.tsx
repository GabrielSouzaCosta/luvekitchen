import Link from 'next/link'
import React, { useState } from 'react'
import styled from 'styled-components'
import InputContainer from '../../components/InputContainer'
import Logo from '../../components/Logo'
import { ButtonPrimary, ButtonSecondary, PrimaryToggleButton, SecondaryToggleButton } from '../../styles/buttons'
import { FlexRowDiv } from '../../styles/styles'
import { AlertText, H1, P } from '../../styles/texts'
import { colors } from '../../styles/theme'
import LoginBgImage from '../../public/images/login-bg.jpg'
import { Input, PasswordInput } from '../../styles/inputs'
import Head from 'next/head'
import { Controller, SubmitHandler, useForm } from 'react-hook-form'
import { useMutation } from 'react-query'
import registerUser from '../../services/auth/registerUser'
import { RiErrorWarningLine } from 'react-icons/ri'
import { useRouter } from 'next/router'
import { useStateContext } from '../../context/ContextProvider'
import getUserInfo from '../../services/auth/getUserInfo'
import { RegisterData } from '../../@types/AuthTypes'
import { AppContextInterface } from '../../@types/context'

const Register = () => {
  const router = useRouter();
  const ctx = useStateContext();

  const { control, register, setValue, handleSubmit, watch, formState: { errors } } = useForm<RegisterData>();
  const [ requestError, setRequestError ] = useState('');
  const { mutate, isLoading } = useMutation(registerUser, {
    onSuccess: async (response) => {
      if (response?.status === 200) {
        const userInfo = await getUserInfo(response.data.token)
          .then(res => {
              return res?.data.data
          })
          .catch(err => console.log(err))

        ctx?.saveUserSession({ 
          token: response.data.token, 
          name: userInfo.name, 
          avatar_img: userInfo.avatar_img, 
          favorites: userInfo.favorites 
        })
        
        router.push('/')
      }
    },
    onError: ({response}) => {
      setRequestError(response.data.message)
    }
  });

  

  const handleRegister : SubmitHandler<RegisterData> = (data) => {
    mutate(data);
  }

  return (
    <>
      <Head>
        <title>Luv&amp;Kitchen - Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <FlexRowDiv style={{ height: '100vh', backgroundColor: colors.light }}>
          <LeftContentDiv>
            <div style={{ margin: '20px 0 0 30px' }}>
              <Logo />
            </div>
          </LeftContentDiv>
          <div>
            <RegisterForm onSubmit={handleSubmit(handleRegister)} method='post'>
                <H1>
                  Register
                </H1>

                <div style={{ width: '100%' }}>
                  <InputContainer
                    label={'Name'}
                  >
                    <Input 
                      type="text"
                      placeholder="Gabriel Souza"
                      register={register}
                      name="name"
                      validationSchema={{ required: true }}
                    />
                    <AlertText>
                      {errors?.email && errors.email.message}
                    </AlertText>
                  </InputContainer>

                  <InputContainer
                    label={"Gender"}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', columnGap: '10px' }}>
                      <Controller
                        control={control}
                        name="gender"
                        render={() => 
                            <SecondaryToggleButton 
                              type="button"
                              onClick={() => setValue('gender', 'masculine')}
                              toggled={watch().gender === 'masculine'}
                              text={'M'}
                            />
                        }
                      />

                      <Controller
                        control={control}
                        name="gender"
                        render={() => 
                            <PrimaryToggleButton 
                              type="button"
                              onClick={() => setValue('gender', 'feminine')}
                              toggled={watch().gender === 'feminine'}
                              text={'F'} 
                            />
                          }
                      />
                    </div>
                  </InputContainer>

                  <InputContainer
                    label={'Email'}
                  >
                    <Input 
                      type="text"
                      placeholder="CordonBleuChef"
                      register={register}
                      name="email"
                      validationSchema={{ required: true }}
                    />
                    <AlertText>
                      {errors?.email && errors.email.message}
                    </AlertText>
                  </InputContainer>

                  <InputContainer
                    label={'Password'}
                  >
                    <PasswordInput
                      type="password"
                      placeholder='Your password'
                      register={register}
                      name="password"
                      validationSchema={{ required: true }}
                    />
                    <AlertText>
                      {errors?.password && errors.password.message}
                    </AlertText>
                  </InputContainer>

                  <InputContainer
                    label={'Repeat Password'}
                  >
                    <PasswordInput
                      type="password"
                      placeholder='Repeat your password'
                      register={register}
                      name="re_password"
                      validationSchema={{ required: true }}
                    />
                    <AlertText>
                      {errors?.re_password && errors.re_password.message}
                    </AlertText>
                  </InputContainer>

                  {requestError &&
                    <AlertText>
                      <FlexRowDiv>
                        <RiErrorWarningLine style={{ marginRight: '5px' }} />
                        {requestError}
                      </FlexRowDiv>
                    </AlertText>
                  }

                  <P>
                    Your password must contain at least 8 characters
                  </P>
                </div>

                <div style={{textAlign: 'center', width: '100%'}}>
                  <ButtonPrimary style={{ width: '100%' }} type="submit">
                    {isLoading ? 
                      <FlexRowDiv style={{ textAlign: 'center', justifyContent: 'center' }}>
                        <span className='loader' style={{ marginRight: '8px' }}></span> 
                        <span>
                          Registering.. 
                        </span>
                      </FlexRowDiv>
                     : 
                      'Register'
                    }
                  </ButtonPrimary>

                  
                  <div style={{ marginTop: '30px' }}>
                    <P style={{ marginBottom: '4px', display: 'inline' }}>
                      Looking for the
                    </P>
                    <Link href="/login">
                      <AlertText style={{ display: 'inline', marginLeft: '4px', textDecoration: 'underline' }}>
                          Login Page?
                        </AlertText>
                    </Link>
                  </div>
                </div>


            </RegisterForm>
          </div>
      </FlexRowDiv>
    </>
  )
}

const LeftContentDiv = styled.div`
  background-image: url(${LoginBgImage.src});
  background-repeat: no-repeat;
  background-size: cover;
  background-color: #191919;
  background-position-x: 20%;
  height: 100%;
  max-width: 50%;
  width: 100%;
  @media screen and (max-width: 768px) {
    display: none
  }
`

export const RegisterForm = styled.form`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  row-gap: 30px;
`

export default Register