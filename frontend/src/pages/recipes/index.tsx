import React, { useState } from 'react'
import Layout from '../../layout/Layout'
import { IoSearchOutline } from 'react-icons/io5'
import { colors } from '../../styles/theme'
import { H2 } from '../../styles/texts'
import Link from 'next/link'
import useGetRandomRecipe from '../../hooks/api/useGetRandomRecipe'
import useGetRecipeCategories from '../../hooks/api/useGetRecipeCategories'
import { StyledH3, StyledInput, CategoriesGrid, RecipesContainer, RecipeCard, CategoryCard, Grid } from './styles'
import Head from 'next/head'
import { useRouter } from 'next/router'
import useGetRecipesByName from '../../hooks/api/useGetRecipesByName'
import RecipeItem from '../../components/RecipeItem'
import { MarginVerticalView } from '@/styles/layout'

interface CategoryItem {
  'strCategoryThumb': string,
  'strCategory': string,
}

function Recipes() {
  const { data: randomRecipe, isLoading } = useGetRandomRecipe();
  const { data: recipeCategories, isLoading: isCategoriesLoading } = useGetRecipeCategories();
  
  const [currentScreen, setCurrentScreen] = useState< 'categories' | 'search' >('categories');
  const [search, setSearch] = useState('');
  const { data: searchedRecipes, isLoading: isSearchedRecipesLoading, isRefetching, refetch } = useGetRecipesByName(search);

  function searchRecipe(e : React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    refetch();
    setCurrentScreen('search')
  }
  
  const CategoriesScreen = () => (
    <>
      <H2 style={{ textAlign: 'center' }} marginSize='md'>
          What about this Recipe?
      </H2>
      <RecipeCard 
        href={`/recipe/${randomRecipe?.data?.meals[0]['idMeal']}`}
        src={randomRecipe?.data?.meals[0]['strMealThumb']} 
        name={randomRecipe?.data?.meals[0]['strMeal']}
      />

      <StyledH3>
        Categories
      </StyledH3>

      <CategoriesGrid>
        {!isCategoriesLoading && 
          recipeCategories?.data?.categories.map(
            (category : CategoryItem, index : number) => 
                <CategoryCard 
                  href={`recipes/${category['strCategory']}`} 
                  key={index} 
                  src={category['strCategoryThumb']} 
                  name={category['strCategory']} 
                />
          )
        }
      </CategoriesGrid>
    </>
  )

  const SearchScreen = () => {
    if (!searchedRecipes?.data?.meals && !isSearchedRecipesLoading) return <div>
      <p>
        No Recipes found
      </p>
    </div>
    return (
      <Grid>
      {searchedRecipes?.data?.meals
        .map((item) => {
          return (
            <RecipeItem
              recipe_id={item['idMeal']}
              key={item['idMeal']}
              name={item['strMeal']}
              href={`/recipe/${item['idMeal']}`}
              src={item['strMealThumb']}
            />
          )
        })
      }
    </Grid>
    )
  }


  if (isLoading) return
  return (
    <>
      <Head>
          <title>Luv&amp;Kitchen - Recipes</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <RecipesContainer>  
          <main>

            <MarginVerticalView mb={'20px'}>
              <form method='get' onSubmit={searchRecipe}>
                <StyledInput
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                  type="text"
                  placeholder='Search for a recipe'
                  iconLeft={ <IoSearchOutline size={24} color={colors.dark} /> }
                />
                <button type="submit" hidden></button>
              </form>
            </MarginVerticalView>

            {currentScreen === 'categories' ?
              <CategoriesScreen />
            :
              <SearchScreen />
            }

          </main>
        </RecipesContainer>
      </Layout>
    </>
  )
}


export default Recipes